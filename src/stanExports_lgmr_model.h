// Generated by rstantools.  Do not edit by hand.

/*
    baldur is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    baldur is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with baldur3.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_lgmr_model_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_lgmr_model");
    reader.add_event(65, 63, "end", "model_lgmr_model");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, 1>
reg_function(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                 const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta,
                 const T2__& I,
                 const T3__& I_L,
                 const T4__& S,
                 const T5__& S_L,
                 const int& N, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        validate_non_negative_index("exp_beta", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> exp_beta(N);
        stan::math::initialize(exp_beta, DUMMY_VAR__);
        stan::math::fill(exp_beta, DUMMY_VAR__);
        stan::math::assign(exp_beta,multiply(.001, stan::math::exp(elt_multiply(theta, subtract(I_L, multiply(S_L, x))))));
        current_statement_begin__ = 12;
        stan::math::assign(exp_beta, add(exp_beta, stan::math::exp(subtract(I, multiply(S, x)))));
        current_statement_begin__ = 13;
        return stan::math::promote_scalar<fun_return_scalar_t__>(exp_beta);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct reg_function_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                 const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta,
                 const T2__& I,
                 const T3__& I_L,
                 const T4__& S,
                 const T5__& S_L,
                 const int& N, std::ostream* pstream__) const {
        return reg_function(x, theta, I, I_L, S, S_L, N, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_lgmr_model
  : public stan::model::model_base_crtp<model_lgmr_model> {
private:
        int N;
        vector_d y;
        vector_d x;
        double v_y;
        vector_d x_star;
public:
    model_lgmr_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_lgmr_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_lgmr_model_namespace::model_lgmr_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 19;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "y", y, 0);
            current_statement_begin__ = 20;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N));
            x = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                x(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 24;
            v_y = double(0);
            stan::math::fill(v_y, DUMMY_VAR__);
            stan::math::assign(v_y,variance(y));
            current_statement_begin__ = 25;
            validate_non_negative_index("x_star", "N", N);
            x_star = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(x_star, DUMMY_VAR__);
            stan::math::assign(x_star,divide(subtract(x, mean(x)), sd(x)));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 28;
            num_params_r__ += 1;
            current_statement_begin__ = 29;
            num_params_r__ += 1;
            current_statement_begin__ = 30;
            num_params_r__ += 1;
            current_statement_begin__ = 31;
            num_params_r__ += 1;
            current_statement_begin__ = 32;
            validate_non_negative_index("eta", "2", 2);
            num_params_r__ += 2;
            current_statement_begin__ = 33;
            validate_non_negative_index("theta", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_lgmr_model() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 28;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 29;
        if (!(context__.contains_r("alpha_mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_mu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha_mu", "double", context__.to_vec());
        double alpha_mu(0);
        alpha_mu = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, alpha_mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 30;
        if (!(context__.contains_r("I")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable I missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("I");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "I", "double", context__.to_vec());
        double I(0);
        I = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(I);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable I: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("I_L")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable I_L missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("I_L");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "I_L", "double", context__.to_vec());
        double I_L(0);
        I_L = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(I_L);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable I_L: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "2", 2);
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta(2);
        size_t eta_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            eta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "N", N);
        context__.validate_dims("parameter initialization", "theta", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta(N);
        size_t theta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            theta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 28;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.scalar_lb_constrain(0, lp__);
            else
                alpha = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 29;
            local_scalar_t__ alpha_mu;
            (void) alpha_mu;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_mu = in__.scalar_lb_constrain(0, lp__);
            else
                alpha_mu = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 30;
            local_scalar_t__ I;
            (void) I;  // dummy to suppress unused var warning
            if (jacobian__)
                I = in__.scalar_constrain(lp__);
            else
                I = in__.scalar_constrain();
            current_statement_begin__ = 31;
            local_scalar_t__ I_L;
            (void) I_L;  // dummy to suppress unused var warning
            if (jacobian__)
                I_L = in__.scalar_constrain(lp__);
            else
                I_L = in__.scalar_constrain();
            current_statement_begin__ = 32;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.vector_lb_constrain(0, 2, lp__);
            else
                eta = in__.vector_lb_constrain(0, 2);
            current_statement_begin__ = 33;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.vector_lub_constrain(0, 1, N, lp__);
            else
                theta = in__.vector_lub_constrain(0, 1, N);
            // transformed parameters
            current_statement_begin__ = 37;
            local_scalar_t__ S;
            (void) S;  // dummy to suppress unused var warning
            stan::math::initialize(S, DUMMY_VAR__);
            stan::math::fill(S, DUMMY_VAR__);
            stan::math::assign(S,get_base1(eta, 1, "eta", 1));
            current_statement_begin__ = 38;
            local_scalar_t__ S_L;
            (void) S_L;  // dummy to suppress unused var warning
            stan::math::initialize(S_L, DUMMY_VAR__);
            stan::math::fill(S_L, DUMMY_VAR__);
            stan::math::assign(S_L,(get_base1(eta, 2, "eta", 1) * .1));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 37;
            if (stan::math::is_uninitialized(S)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: S";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "S", S, 0);
            current_statement_begin__ = 38;
            if (stan::math::is_uninitialized(S_L)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: S_L";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S_L: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "S_L", S_L, 0);
            // model body
            current_statement_begin__ = 42;
            lp_accum__.add(exp_mod_normal_log<propto__>(alpha, alpha_mu, 1, .1));
            current_statement_begin__ = 43;
            lp_accum__.add(normal_log<propto__>(alpha_mu, 50, 10));
            current_statement_begin__ = 44;
            lp_accum__.add(std_normal_log<propto__>(I));
            current_statement_begin__ = 45;
            lp_accum__.add(skew_normal_log<propto__>(I_L, 2, 15, 35));
            current_statement_begin__ = 46;
            lp_accum__.add(std_normal_log<propto__>(eta));
            current_statement_begin__ = 47;
            lp_accum__.add(beta_log<propto__>(theta, .5, .5));
            {
            current_statement_begin__ = 49;
            validate_non_negative_index("exp_beta", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> exp_beta(N);
            stan::math::initialize(exp_beta, DUMMY_VAR__);
            stan::math::fill(exp_beta, DUMMY_VAR__);
            stan::math::assign(exp_beta,reg_function(x_star, theta, I, I_L, S, S_L, N, pstream__));
            current_statement_begin__ = 50;
            lp_accum__.add(gamma_log<propto__>(y, alpha, elt_divide(alpha, exp_beta)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("alpha_mu");
        names__.push_back("I");
        names__.push_back("I_L");
        names__.push_back("eta");
        names__.push_back("theta");
        names__.push_back("S");
        names__.push_back("S_L");
        names__.push_back("nrmse");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_lgmr_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double alpha = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha);
        double alpha_mu = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha_mu);
        double I = in__.scalar_constrain();
        vars__.push_back(I);
        double I_L = in__.scalar_constrain();
        vars__.push_back(I_L);
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta = in__.vector_lb_constrain(0, 2);
        size_t eta_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            vars__.push_back(eta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta = in__.vector_lub_constrain(0, 1, N);
        size_t theta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            vars__.push_back(theta(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 37;
            double S;
            (void) S;  // dummy to suppress unused var warning
            stan::math::initialize(S, DUMMY_VAR__);
            stan::math::fill(S, DUMMY_VAR__);
            stan::math::assign(S,get_base1(eta, 1, "eta", 1));
            current_statement_begin__ = 38;
            double S_L;
            (void) S_L;  // dummy to suppress unused var warning
            stan::math::initialize(S_L, DUMMY_VAR__);
            stan::math::fill(S_L, DUMMY_VAR__);
            stan::math::assign(S_L,(get_base1(eta, 2, "eta", 1) * .1));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 37;
            check_greater_or_equal(function__, "S", S, 0);
            current_statement_begin__ = 38;
            check_greater_or_equal(function__, "S_L", S_L, 0);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(S);
                vars__.push_back(S_L);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 55;
            double nrmse;
            (void) nrmse;  // dummy to suppress unused var warning
            stan::math::initialize(nrmse, DUMMY_VAR__);
            stan::math::fill(nrmse, DUMMY_VAR__);
            // generated quantities statements
            {
            current_statement_begin__ = 57;
            validate_non_negative_index("se", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> se(N);
            stan::math::initialize(se, DUMMY_VAR__);
            stan::math::fill(se, DUMMY_VAR__);
            stan::math::assign(se,reg_function(x_star, theta, I, I_L, S, S_L, N, pstream__));
            current_statement_begin__ = 58;
            stan::math::assign(se, subtract(se, y));
            current_statement_begin__ = 59;
            stan::math::assign(se, square(se));
            current_statement_begin__ = 60;
            stan::math::assign(nrmse, (mean(se) / v_y));
            }
            current_statement_begin__ = 62;
            stan::math::assign(nrmse, stan::math::sqrt(nrmse));
            // validate, write generated quantities
            current_statement_begin__ = 55;
            vars__.push_back(nrmse);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_lgmr_model";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "I";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "I_L";
        param_names__.push_back(param_name_stream__.str());
        size_t eta_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_L";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "nrmse";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "I";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "I_L";
        param_names__.push_back(param_name_stream__.str());
        size_t eta_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_L";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "nrmse";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_lgmr_model_namespace::model_lgmr_model stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
