// Generated by rstantools.  Do not edit by hand.

/*
    baldur3 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    baldur3 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with baldur3.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_weighted_decision_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_weighted_decision");
    reader.add_event(40, 38, "end", "model_weighted_decision");
    return reader;
}
#include <stan_meta_header.hpp>
class model_weighted_decision
  : public stan::model::model_base_crtp<model_weighted_decision> {
private:
        int N;
        int K;
        int C;
        matrix_d x;
        vector_d y;
        std::vector<std::vector<int> > c;
        double alpha;
        double beta_gamma;
        vector_d xbar;
        vector_d u;
public:
    model_weighted_decision(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_weighted_decision(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_weighted_decision_namespace::model_weighted_decision";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "C", "int", context__.to_vec());
            C = int(0);
            vals_i__ = context__.vals_i("C");
            pos__ = 0;
            C = vals_i__[pos__++];
            current_statement_begin__ = 6;
            validate_non_negative_index("x", "N", N);
            validate_non_negative_index("x", "K", K);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(N,K));
            x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_2_max__ = K;
            size_t x_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("c", "C", C);
            validate_non_negative_index("c", "2", 2);
            context__.validate_dims("data initialization", "c", "int", context__.to_vec(C,2));
            c = std::vector<std::vector<int> >(C, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("c");
            pos__ = 0;
            size_t c_k_0_max__ = C;
            size_t c_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < c_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < c_k_0_max__; ++k_0__) {
                    c[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "alpha", "double", context__.to_vec());
            alpha = double(0);
            vals_r__ = context__.vals_r("alpha");
            pos__ = 0;
            alpha = vals_r__[pos__++];
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "beta_gamma", "double", context__.to_vec());
            beta_gamma = double(0);
            vals_r__ = context__.vals_r("beta_gamma");
            pos__ = 0;
            beta_gamma = vals_r__[pos__++];
            current_statement_begin__ = 11;
            validate_non_negative_index("xbar", "K", K);
            context__.validate_dims("data initialization", "xbar", "vector_d", context__.to_vec(K));
            xbar = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("xbar");
            pos__ = 0;
            size_t xbar_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < xbar_j_1_max__; ++j_1__) {
                xbar(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("u", "N", N);
            context__.validate_dims("data initialization", "u", "vector_d", context__.to_vec(N));
            u = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("u");
            pos__ = 0;
            size_t u_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
                u(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 15;
            validate_non_negative_index("beta", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 16;
            num_params_r__ += 1;
            current_statement_begin__ = 17;
            validate_non_negative_index("y_diff", "C", C);
            num_params_r__ += (1 * C);
            current_statement_begin__ = 18;
            validate_non_negative_index("eta", "K", K);
            num_params_r__ += K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_weighted_decision() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 15;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "K", K);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(K);
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("y_diff")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable y_diff missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("y_diff");
        pos__ = 0U;
        validate_non_negative_index("y_diff", "C", C);
        context__.validate_dims("parameter initialization", "y_diff", "double", context__.to_vec(C));
        std::vector<double> y_diff(C, double(0));
        size_t y_diff_k_0_max__ = C;
        for (size_t k_0__ = 0; k_0__ < y_diff_k_0_max__; ++k_0__) {
            y_diff[k_0__] = vals_r__[pos__++];
        }
        size_t y_diff_i_0_max__ = C;
        for (size_t i_0__ = 0; i_0__ < y_diff_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(y_diff[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable y_diff: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 18;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "K", K);
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta(K);
        size_t eta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            eta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 15;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(K, lp__);
            else
                beta = in__.vector_constrain(K);
            current_statement_begin__ = 16;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 17;
            std::vector<local_scalar_t__> y_diff;
            size_t y_diff_d_0_max__ = C;
            y_diff.reserve(y_diff_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < y_diff_d_0_max__; ++d_0__) {
                if (jacobian__)
                    y_diff.push_back(in__.scalar_constrain(lp__));
                else
                    y_diff.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 18;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.vector_constrain(K, lp__);
            else
                eta = in__.vector_constrain(K);
            // model body
            current_statement_begin__ = 21;
            lp_accum__.add(gamma_log<propto__>(sigma, alpha, beta_gamma));
            current_statement_begin__ = 22;
            lp_accum__.add(normal_log<propto__>(eta, 0, 1));
            current_statement_begin__ = 23;
            lp_accum__.add(normal_log<propto__>(y, multiply(x, beta), multiply(sigma, u)));
            current_statement_begin__ = 24;
            lp_accum__.add(normal_log<propto__>(beta, add(xbar, multiply(sigma, eta)), sigma));
            current_statement_begin__ = 25;
            lp_accum__.add(normal_log<propto__>(y_diff, subtract(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(c, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "c")), stan::model::nil_index_list()), "beta"), stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(c, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "c")), stan::model::nil_index_list()), "beta")), sigma));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("sigma");
        names__.push_back("y_diff");
        names__.push_back("eta");
        names__.push_back("error");
        names__.push_back("q");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_weighted_decision_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(K);
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        std::vector<double> y_diff;
        size_t y_diff_d_0_max__ = C;
        y_diff.reserve(y_diff_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < y_diff_d_0_max__; ++d_0__) {
            y_diff.push_back(in__.scalar_constrain());
        }
        size_t y_diff_k_0_max__ = C;
        for (size_t k_0__ = 0; k_0__ < y_diff_k_0_max__; ++k_0__) {
            vars__.push_back(y_diff[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta = in__.vector_constrain(K);
        size_t eta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            vars__.push_back(eta(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 28;
            validate_non_negative_index("error", "C", C);
            Eigen::Matrix<double, Eigen::Dynamic, 1> error(C);
            stan::math::initialize(error, DUMMY_VAR__);
            stan::math::fill(error, DUMMY_VAR__);
            current_statement_begin__ = 29;
            validate_non_negative_index("q", "C", C);
            Eigen::Matrix<double, Eigen::Dynamic, 1> q(C);
            stan::math::initialize(q, DUMMY_VAR__);
            stan::math::fill(q, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 30;
            for (int k = 1; k <= C; ++k) {
                current_statement_begin__ = 31;
                stan::model::assign(q, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            (get_base1(beta, get_base1(get_base1(c, k, "c", 1), 1, "c", 2), "beta", 1) - get_base1(beta, get_base1(get_base1(c, k, "c", 1), 2, "c", 2), "beta", 1)), 
                            "assigning variable q");
                current_statement_begin__ = 32;
                if (as_bool(logical_lt(0, get_base1(q, k, "q", 1)))) {
                    current_statement_begin__ = 33;
                    stan::model::assign(error, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                (normal_cdf(0, get_base1(q, k, "q", 1), sigma) * 2), 
                                "assigning variable error");
                } else {
                    current_statement_begin__ = 35;
                    stan::model::assign(error, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                ((1 - normal_cdf(0, get_base1(q, k, "q", 1), sigma)) * 2), 
                                "assigning variable error");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 28;
            check_greater_or_equal(function__, "error", error, 0);
            check_less_or_equal(function__, "error", error, 1);
            size_t error_j_1_max__ = C;
            for (size_t j_1__ = 0; j_1__ < error_j_1_max__; ++j_1__) {
                vars__.push_back(error(j_1__));
            }
            current_statement_begin__ = 29;
            size_t q_j_1_max__ = C;
            for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
                vars__.push_back(q(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_weighted_decision";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t y_diff_k_0_max__ = C;
        for (size_t k_0__ = 0; k_0__ < y_diff_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_diff" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t error_j_1_max__ = C;
        for (size_t j_1__ = 0; j_1__ < error_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "error" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t q_j_1_max__ = C;
        for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "q" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t y_diff_k_0_max__ = C;
        for (size_t k_0__ = 0; k_0__ < y_diff_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_diff" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t error_j_1_max__ = C;
        for (size_t j_1__ = 0; j_1__ < error_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "error" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t q_j_1_max__ = C;
        for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "q" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_weighted_decision_namespace::model_weighted_decision stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
